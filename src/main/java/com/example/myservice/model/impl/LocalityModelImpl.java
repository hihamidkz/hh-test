package com.example.myservice.model.impl;

import com.example.myservice.model.Locality;
import com.example.myservice.model.LocalityModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the Locality service. Represents a row in the &quot;hh_api_Locality&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.example.myservice.model.LocalityModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link LocalityImpl}.
 * </p>
 *
 * @author hamid
 * @see LocalityImpl
 * @see com.example.myservice.model.Locality
 * @see com.example.myservice.model.LocalityModel
 * @generated
 */
public class LocalityModelImpl extends BaseModelImpl<Locality>
    implements LocalityModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a locality model instance should use the {@link com.example.myservice.model.Locality} interface instead.
     */
    public static final String TABLE_NAME = "hh_api_Locality";
    public static final Object[][] TABLE_COLUMNS = {
            { "id_", Types.BIGINT },
            { "name", Types.VARCHAR },
            { "parentId", Types.BIGINT }
        };
    public static final String TABLE_SQL_CREATE = "create table hh_api_Locality (id_ LONG not null primary key,name VARCHAR(75) null,parentId LONG)";
    public static final String TABLE_SQL_DROP = "drop table hh_api_Locality";
    public static final String ORDER_BY_JPQL = " ORDER BY locality.name ASC";
    public static final String ORDER_BY_SQL = " ORDER BY hh_api_Locality.name ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.example.myservice.model.Locality"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.example.myservice.model.Locality"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.com.example.myservice.model.Locality"),
            true);
    public static long NAME_COLUMN_BITMASK = 1L;
    public static long PARENTID_COLUMN_BITMASK = 2L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.example.myservice.model.Locality"));
    private static ClassLoader _classLoader = Locality.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            Locality.class
        };
    private long _id;
    private String _name;
    private String _originalName;
    private long _parentId;
    private long _originalParentId;
    private boolean _setOriginalParentId;
    private long _columnBitmask;
    private Locality _escapedModel;

    public LocalityModelImpl() {
    }

    @Override
    public long getPrimaryKey() {
        return _id;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _id;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return Locality.class;
    }

    @Override
    public String getModelClassName() {
        return Locality.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("id", getId());
        attributes.put("name", getName());
        attributes.put("parentId", getParentId());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long id = (Long) attributes.get("id");

        if (id != null) {
            setId(id);
        }

        String name = (String) attributes.get("name");

        if (name != null) {
            setName(name);
        }

        Long parentId = (Long) attributes.get("parentId");

        if (parentId != null) {
            setParentId(parentId);
        }
    }

    @Override
    public long getId() {
        return _id;
    }

    @Override
    public void setId(long id) {
        _id = id;
    }

    @Override
    public String getName() {
        if (_name == null) {
            return StringPool.BLANK;
        } else {
            return _name;
        }
    }

    @Override
    public void setName(String name) {
        _columnBitmask = -1L;

        if (_originalName == null) {
            _originalName = _name;
        }

        _name = name;
    }

    public String getOriginalName() {
        return GetterUtil.getString(_originalName);
    }

    @Override
    public long getParentId() {
        return _parentId;
    }

    @Override
    public void setParentId(long parentId) {
        _columnBitmask |= PARENTID_COLUMN_BITMASK;

        if (!_setOriginalParentId) {
            _setOriginalParentId = true;

            _originalParentId = _parentId;
        }

        _parentId = parentId;
    }

    public long getOriginalParentId() {
        return _originalParentId;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
            Locality.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public Locality toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (Locality) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        LocalityImpl localityImpl = new LocalityImpl();

        localityImpl.setId(getId());
        localityImpl.setName(getName());
        localityImpl.setParentId(getParentId());

        localityImpl.resetOriginalValues();

        return localityImpl;
    }

    @Override
    public int compareTo(Locality locality) {
        int value = 0;

        value = getName().compareTo(locality.getName());

        if (value != 0) {
            return value;
        }

        return 0;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof Locality)) {
            return false;
        }

        Locality locality = (Locality) obj;

        long primaryKey = locality.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        LocalityModelImpl localityModelImpl = this;

        localityModelImpl._originalName = localityModelImpl._name;

        localityModelImpl._originalParentId = localityModelImpl._parentId;

        localityModelImpl._setOriginalParentId = false;

        localityModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<Locality> toCacheModel() {
        LocalityCacheModel localityCacheModel = new LocalityCacheModel();

        localityCacheModel.id = getId();

        localityCacheModel.name = getName();

        String name = localityCacheModel.name;

        if ((name != null) && (name.length() == 0)) {
            localityCacheModel.name = null;
        }

        localityCacheModel.parentId = getParentId();

        return localityCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(7);

        sb.append("{id=");
        sb.append(getId());
        sb.append(", name=");
        sb.append(getName());
        sb.append(", parentId=");
        sb.append(getParentId());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(13);

        sb.append("<model><model-name>");
        sb.append("com.example.myservice.model.Locality");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>id</column-name><column-value><![CDATA[");
        sb.append(getId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>name</column-name><column-value><![CDATA[");
        sb.append(getName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>parentId</column-name><column-value><![CDATA[");
        sb.append(getParentId());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
