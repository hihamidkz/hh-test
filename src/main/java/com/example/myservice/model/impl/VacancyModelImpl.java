package com.example.myservice.model.impl;

import com.example.myservice.model.Vacancy;
import com.example.myservice.model.VacancyModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the Vacancy service. Represents a row in the &quot;hh_api_Vacancy&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.example.myservice.model.VacancyModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link VacancyImpl}.
 * </p>
 *
 * @author hamid
 * @see VacancyImpl
 * @see com.example.myservice.model.Vacancy
 * @see com.example.myservice.model.VacancyModel
 * @generated
 */
public class VacancyModelImpl extends BaseModelImpl<Vacancy>
    implements VacancyModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a vacancy model instance should use the {@link com.example.myservice.model.Vacancy} interface instead.
     */
    public static final String TABLE_NAME = "hh_api_Vacancy";
    public static final Object[][] TABLE_COLUMNS = {
            { "id_", Types.BIGINT },
            { "name", Types.VARCHAR },
            { "publishedAt", Types.VARCHAR },
            { "employer", Types.VARCHAR },
            { "salary", Types.VARCHAR },
            { "address", Types.VARCHAR }
        };
    public static final String TABLE_SQL_CREATE = "create table hh_api_Vacancy (id_ LONG not null primary key,name VARCHAR(75) null,publishedAt VARCHAR(75) null,employer VARCHAR(75) null,salary VARCHAR(75) null,address VARCHAR(75) null)";
    public static final String TABLE_SQL_DROP = "drop table hh_api_Vacancy";
    public static final String ORDER_BY_JPQL = " ORDER BY vacancy.id ASC";
    public static final String ORDER_BY_SQL = " ORDER BY hh_api_Vacancy.id_ ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.example.myservice.model.Vacancy"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.example.myservice.model.Vacancy"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = false;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.example.myservice.model.Vacancy"));
    private static ClassLoader _classLoader = Vacancy.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            Vacancy.class
        };
    private long _id;
    private String _name;
    private String _publishedAt;
    private String _employer;
    private String _salary;
    private String _address;
    private Vacancy _escapedModel;

    public VacancyModelImpl() {
    }

    @Override
    public long getPrimaryKey() {
        return _id;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _id;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return Vacancy.class;
    }

    @Override
    public String getModelClassName() {
        return Vacancy.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("id", getId());
        attributes.put("name", getName());
        attributes.put("publishedAt", getPublishedAt());
        attributes.put("employer", getEmployer());
        attributes.put("salary", getSalary());
        attributes.put("address", getAddress());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long id = (Long) attributes.get("id");

        if (id != null) {
            setId(id);
        }

        String name = (String) attributes.get("name");

        if (name != null) {
            setName(name);
        }

        String publishedAt = (String) attributes.get("publishedAt");

        if (publishedAt != null) {
            setPublishedAt(publishedAt);
        }

        String employer = (String) attributes.get("employer");

        if (employer != null) {
            setEmployer(employer);
        }

        String salary = (String) attributes.get("salary");

        if (salary != null) {
            setSalary(salary);
        }

        String address = (String) attributes.get("address");

        if (address != null) {
            setAddress(address);
        }
    }

    @Override
    public long getId() {
        return _id;
    }

    @Override
    public void setId(long id) {
        _id = id;
    }

    @Override
    public String getName() {
        if (_name == null) {
            return StringPool.BLANK;
        } else {
            return _name;
        }
    }

    @Override
    public void setName(String name) {
        _name = name;
    }

    @Override
    public String getPublishedAt() {
        if (_publishedAt == null) {
            return StringPool.BLANK;
        } else {
            return _publishedAt;
        }
    }

    @Override
    public void setPublishedAt(String publishedAt) {
        _publishedAt = publishedAt;
    }

    @Override
    public String getEmployer() {
        if (_employer == null) {
            return StringPool.BLANK;
        } else {
            return _employer;
        }
    }

    @Override
    public void setEmployer(String employer) {
        _employer = employer;
    }

    @Override
    public String getSalary() {
        if (_salary == null) {
            return StringPool.BLANK;
        } else {
            return _salary;
        }
    }

    @Override
    public void setSalary(String salary) {
        _salary = salary;
    }

    @Override
    public String getAddress() {
        if (_address == null) {
            return StringPool.BLANK;
        } else {
            return _address;
        }
    }

    @Override
    public void setAddress(String address) {
        _address = address;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
            Vacancy.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public Vacancy toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (Vacancy) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        VacancyImpl vacancyImpl = new VacancyImpl();

        vacancyImpl.setId(getId());
        vacancyImpl.setName(getName());
        vacancyImpl.setPublishedAt(getPublishedAt());
        vacancyImpl.setEmployer(getEmployer());
        vacancyImpl.setSalary(getSalary());
        vacancyImpl.setAddress(getAddress());

        vacancyImpl.resetOriginalValues();

        return vacancyImpl;
    }

    @Override
    public int compareTo(Vacancy vacancy) {
        long primaryKey = vacancy.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof Vacancy)) {
            return false;
        }

        Vacancy vacancy = (Vacancy) obj;

        long primaryKey = vacancy.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
    }

    @Override
    public CacheModel<Vacancy> toCacheModel() {
        VacancyCacheModel vacancyCacheModel = new VacancyCacheModel();

        vacancyCacheModel.id = getId();

        vacancyCacheModel.name = getName();

        String name = vacancyCacheModel.name;

        if ((name != null) && (name.length() == 0)) {
            vacancyCacheModel.name = null;
        }

        vacancyCacheModel.publishedAt = getPublishedAt();

        String publishedAt = vacancyCacheModel.publishedAt;

        if ((publishedAt != null) && (publishedAt.length() == 0)) {
            vacancyCacheModel.publishedAt = null;
        }

        vacancyCacheModel.employer = getEmployer();

        String employer = vacancyCacheModel.employer;

        if ((employer != null) && (employer.length() == 0)) {
            vacancyCacheModel.employer = null;
        }

        vacancyCacheModel.salary = getSalary();

        String salary = vacancyCacheModel.salary;

        if ((salary != null) && (salary.length() == 0)) {
            vacancyCacheModel.salary = null;
        }

        vacancyCacheModel.address = getAddress();

        String address = vacancyCacheModel.address;

        if ((address != null) && (address.length() == 0)) {
            vacancyCacheModel.address = null;
        }

        return vacancyCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(13);

        sb.append("{id=");
        sb.append(getId());
        sb.append(", name=");
        sb.append(getName());
        sb.append(", publishedAt=");
        sb.append(getPublishedAt());
        sb.append(", employer=");
        sb.append(getEmployer());
        sb.append(", salary=");
        sb.append(getSalary());
        sb.append(", address=");
        sb.append(getAddress());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(22);

        sb.append("<model><model-name>");
        sb.append("com.example.myservice.model.Vacancy");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>id</column-name><column-value><![CDATA[");
        sb.append(getId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>name</column-name><column-value><![CDATA[");
        sb.append(getName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>publishedAt</column-name><column-value><![CDATA[");
        sb.append(getPublishedAt());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>employer</column-name><column-value><![CDATA[");
        sb.append(getEmployer());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>salary</column-name><column-value><![CDATA[");
        sb.append(getSalary());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>address</column-name><column-value><![CDATA[");
        sb.append(getAddress());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
